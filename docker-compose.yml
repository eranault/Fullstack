version: '3.8' 

services:
  db: 
    image: postgres:latest
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}    
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}   
    ports:
      - "5432:5432"                       
    volumes:
      - postgres_data:/var/lib/postgresql/data 
    networks:
      - app-network                        

  api:
    build:
      context: ./backend               
      dockerfile: Dockerfile              
    restart: always                        
    environment:
      DATABASE_URL: ${DATABASE_URL} 

    ports:
      - "8000:8000"                
    depends_on:
      - db                           
    networks:
      - app-network                         
    healthcheck:
      test: ["CMD", "curl", "-f", "http://api:8000/health"] 
      interval: 10s                       
      timeout: 5s                         
      retries: 5                         

  web:
    build:
      context: ./frontend                
      dockerfile: Dockerfile    
    ports:
      - "5000:5000"                         
    depends_on:
      api:
        condition: service_healthy         
      elasticsearch:
        condition: service_healthy     
    networks:
      - app-network 
    volumes:
      - ./frontend:/app

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.14.0
    environment:
      - discovery.type=single-node        
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"    
      - "network.host=0.0.0.0"            
      - "ingest.geoip.downloader.enabled=false"  
    ports:
      - "9200:9200"          
      - "9300:9300"                          
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data  
    networks:
      - app-network                     
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:9200 >/dev/null || exit 1"] 
      interval: 30s                  
      timeout: 10s 
      retries: 3                   

networks:
  app-network:                     
    driver: bridge                       

volumes:
  postgres_data:                        
  elasticsearch_data:                   

